{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","inMove","setInMove","touchStartY","setTouchStartY","abas","offsets","setOffsets","activeSectionMenu","setActiveSectionMenu","activeSection","handleMouseWheel","e","wheelDelta","moveUp","moveDown","preventDefault","handleMouseWheelDOM","detail","mudar","scrollToSection","id","force","document","getElementsByTagName","scrollIntoView","behavior","setTimeout","touchStart","touches","clientY","touchMove","currentY","useEffect","sections","length","aux","i","sectionOffset","offsetTop","push","calculateSectionOffsets","window","addEventListener","passive","removeEventListener","className","href","target","style","color","props","menuBar","onClick","key","borderColor","menuSide","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41ee0d10.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport './styles.css';\nimport './vue.css';\n\n\nexport default function App() {\n\n  const [inMove,setInMove] = useState(false);\n\n  const [touchStartY , setTouchStartY] = useState(0);\n\n  const [abas , setAbas] = useState(['HOME','ABOUT','PROJECTS']);\n\n  const [offsets , setOffsets] = useState(4);\n\n  const [activeSectionMenu , setActiveSectionMenu] = useState(0);\n\n  var activeSection = 0;\n  \n\n  function calculateSectionOffsets() {\n    let sections = document.getElementsByTagName(\"section\");\n    let length = sections.length;\n    let aux = [];\n\n    \n\n    for (let i = 0; i < length; i++) {\n      let sectionOffset = sections[i].offsetTop;\n      \n      aux.push(sectionOffset);\n\n    }\n\n    setOffsets(aux.length);\n    \n\n  }\n\n  function menuSide(props){\n\n    var menuBar = [];\n    \n    var cont = 0;\n\n    if(activeSectionMenu == 0){\n\n       menuBar.push(<span\n          className= {activeSectionMenu == 0 ? \"menu-point active\" : \"menu-point\" } \n          onClick={() => scrollToSection(0)}\n          key={abas[0]}\n          style={{color: 'white'}}\n        >{ abas[0] }</span>);\n\n        menuBar.push(<span\n          className= {activeSectionMenu == 1 ? \"menu-point active\" : \"menu-point\" } \n          onClick={() => scrollToSection(1)}\n          key={abas[1]}\n          style={{color: 'white'}}\n        >{ abas[1] }</span>);\n\n        menuBar.push(<span\n          className= {activeSectionMenu == 2 ? \"menu-point active\" : \"menu-point\" } \n          onClick={() => scrollToSection(2)}\n          key={abas[2]}\n          style={{color: 'white'}}\n        >{ abas[2] }</span>);\n\n      menuBar.push(<span\n        className= {activeSectionMenu == 3? \"menu-point-contact active\" : \"menu-point-contact\" } \n        onClick={() => scrollToSection(3)}\n        key=\"CONTACT\"\n        style={{color: 'white'}}>CONTACT</span>);\n\n      return menuBar;\n      \n    }else{\n\n\n        menuBar.push(<span\n          className= {activeSectionMenu == 0 ? \"menu-point active\" : \"menu-point\" } \n          onClick={() => scrollToSection(0)}\n          key={abas[0]}\n          style={{color: 'black'}}\n        >{ abas[0] }</span>);\n\n        menuBar.push(<span\n          className= {activeSectionMenu == 1 ? \"menu-point active\" : \"menu-point\" } \n          onClick={() => scrollToSection(1)}\n          key={abas[1]}\n          style={{color: 'black'}}\n        >{ abas[1] }</span>);\n\n        menuBar.push(<span\n          className= {activeSectionMenu == 2 ? \"menu-point active\" : \"menu-point\" } \n          onClick={() => scrollToSection(2)}\n          key={abas[2]}\n          style={{color: 'black'}}\n        >{ abas[2] }</span>);\n\n      menuBar.push(<span\n        className= {activeSectionMenu === 3? \"menu-point-contact active\" : \"menu-point-contact\" } \n        onClick={() => scrollToSection(3)}\n        key=\"CONTACT\"\n        style={{color: 'black', borderColor: 'black'}}>CONTACT</span>);\n\n      return menuBar;\n    }\n  }\n\n  function handleMouseWheel(e) {\n\n    if (e.wheelDelta < 30 && inMove == false) {\n      moveUp();\n    } else if (e.wheelDelta > 30 && inMove == false) {\n      moveDown();\n    }\n\n    e.preventDefault();\n    return false;\n  }\n\n  function handleMouseWheelDOM(e) {\n    if (e.detail > 0 && !inMove == false) {\n      moveUp();\n    } else if (e.detail < 0 && !inMove == false) {\n      moveDown();\n    }\n\n    return false;\n  }\n\n  function moveDown() {\n    setInMove(true);\n    \n    var mudar = activeSection - 1 < 0 ? offsets - 1 : activeSection - 1;\n    \n    activeSection = mudar;\n\n    scrollToSection(mudar, true);\n  }\n\n  function moveUp() {\n    setInMove(true);\n    \n    var mudar = activeSection + 1 > offsets - 1 ? 0 : activeSection + 1;\n\n    activeSection = mudar;\n\n    scrollToSection(mudar, true);\n  }\n\n  function scrollToSection(id, force = false) {\n    if (inMove && !force) return false;\n    \n    activeSection = id;\n\n    setActiveSectionMenu(id);\n\n    setInMove(true);\n\n    document.getElementsByTagName(\"section\")[id].scrollIntoView({ behavior: \"smooth\" });\n\n    setTimeout(() => {\n      setInMove(false);\n    }, 400);\n  }\n\n  function touchStart(e) {\n    e.preventDefault();\n\n    setTouchStartY(e.touches[0].clientY);\n  }\n\n  function touchMove(e) {\n    if (inMove) return false;\n    e.preventDefault();\n\n    const currentY = e.touches[0].clientY;\n\n    if (touchStartY < currentY) {\n      moveDown();\n    } else {\n      moveUp();\n    }\n\n    setTouchStartY(0);\n    return false;\n  }\n\n  useEffect( () => {\n\n    calculateSectionOffsets();\n\n    window.addEventListener(\"DOMMouseScroll\", handleMouseWheelDOM); // Mozilla Firefox\n    window.addEventListener(\"mousewheel\", handleMouseWheel, {\n      passive: false\n    }); // Other browsers\n\n    window.addEventListener(\"touchstart\", touchStart, { passive: false }); // mobile devices\n    window.addEventListener(\"touchmove\", touchMove, { passive: false }); // mobile devices\n\n    return () => {\n      window.removeEventListener(\"mousewheel\", handleMouseWheel, {\n        passive: false\n      }); // Other browsers\n      window.removeEventListener(\"DOMMouseScroll\", handleMouseWheelDOM); // Mozilla Firefox\n  \n      window.removeEventListener(\"touchstart\", touchStart); // mobile devices\n      window.removeEventListener(\"touchmove\", touchMove); // mobile devices\n    };\n\n  }, [])\n\n\n  return (\n    <div id=\"app\">\n      <section className=\"fullpage main\">\n        <h1>Software Developer.</h1>\n        <p>\n          by\n          <a href=\"https://github.com/gabriel-rodriguess\" target=\"_blank\">Gabriel Rodrigues</a>\n        </p>\n\n      </section>\n      <section className=\"fullpage white\">\n      <h1 style={{ color : \"black\"}}>About me</h1>\n      </section>\n\n      <section className=\"fullpage red\">\n        <h1>Projects</h1>\n      </section>\n      \n      <section className=\"fullpage green\">\n        <h1>Contact</h1>\n\n      </section>\n      \n      <div className=\"sections-menu\">\n        {menuSide()}\n      </div>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}